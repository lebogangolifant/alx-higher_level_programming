Test cases module for the BaseGeometry class


Import module:

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Class Initialization:

>>> bg = BaseGeometry()

Test case 1: Calling the area() method without implementation

>>> bg.area()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "7-base_geometry.py", line <line number>, in area
    raise Exception("area() is not implemented")
Exception: area() is not implemented

Test case 2: Validating integer values with the integer_validator() method

>>> bg.integer_validator("width", 10)
>>> bg.integer_validator("height", 5)

Test case 3: Validating non-integer values with the integer_validator() method

>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "7-base_geometry.py", line <line number>, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: name must be an integer

Test case 4: Validating non-positive integer values with the integer_validator() method

>>> bg.integer_validator("size", -3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "7-base_geometry.py", line <line number>, in integer_validator
    raise ValueError("{} must be greater than 0".format(name))
ValueError: size must be greater than 0

Test case 5: Validating zero value with the integer_validator() method

>>> bg.integer_validator("count", 0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "7-base_geometry.py", line <line number>, in integer_validator
    raise ValueError("{} must be greater than 0".format(name))
ValueError: count must be greater than 0

Test case 6: Validating different attribute names and values

>>> bg.integer_validator("length", 15)
>>> bg.integer_validator("quantity", 8)
>>> bg.integer_validator("age", 20)
