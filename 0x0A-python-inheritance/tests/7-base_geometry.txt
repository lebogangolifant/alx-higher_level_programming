"""
This module contains test cases for Task 7: Python - Integer Validation.
"""

# Test case 1: Valid integer value
"""
Test the integer_validator method with a valid integer value.

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)
"""

# Test case 2: Non-integer value
"""
Test the integer_validator method with a non-integer value.

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> try:
...     bg.integer_validator("name", "John")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] name must be an integer
"""

# Test case 3: Zero value
"""
Test the integer_validator method with a zero value.

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> try:
...     bg.integer_validator("age", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] age must be greater than 0
"""

# Test case 4: Negative value
"""
Test the integer_validator method with a negative value.

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> try:
...     bg.integer_validator("distance", -4)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] distance must be greater than 0
"""

if __name__ == '__main__':
    import doctest
    doctest.testmod()
